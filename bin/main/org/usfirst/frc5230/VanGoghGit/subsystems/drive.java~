// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5230.VanGoghGit.subsystems;


import org.usfirst.frc5230.VanGoghGit.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
import edu.wpi.first.wpilibj.DoubleSolenoid.Value;
import edu.wpi.first.wpilibj.GenericHID.RumbleType;

import com.revrobotics.CANEncoder;
import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;

import edu.wpi.first.wpilibj.ADXRS450_Gyro;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Ultrasonic;

import java.awt.Robot;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.RobotDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class drive extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS


    private DoubleSolenoid shiftingSolenoid;
    private CANSparkMax sparkMAX1;
    private CANSparkMax sparkMAX2;
    private CANSparkMax sparkMAX3;
    private CANSparkMax sparkMAX4;
    private RobotDrive robotDrive41;

    private CANEncoder rightEncoder;
    private CANEncoder leftEncoder;
    private Ultrasonic leftUltra = new Ultrasonic(0, 1);
    private Ultrasonic rightUltra = new Ultrasonic(2, 3);
 //   private ADXRS450_Gyro FRCGyro = new ADXRS450_Gyro();

    public boolean isDriverControlMode = true;
    public double X1 = 0;
    public double X2 = 0;
    public double Y1 = 0;
    public double Y2 = 0;
    public double LineAngle = 0;  
    public double LineLength = 0;
    public double midpointX;
    public double midpointY;
    public boolean AreThereLines = false;
    

    public drive() {
    
        shiftingSolenoid = new DoubleSolenoid(0, 0, 1);
        addChild("ShiftingSolenoid",shiftingSolenoid);
        
        
        sparkMAX1 = new CANSparkMax(16, MotorType.kBrushless);
        
        
        sparkMAX2 = new CANSparkMax(1, MotorType.kBrushless);
        
        
        sparkMAX3 = new CANSparkMax(14, MotorType.kBrushless);
        
        
        sparkMAX4 = new CANSparkMax(15, MotorType.kBrushless);
        
        
        
        robotDrive41 = new RobotDrive(sparkMAX1, sparkMAX2,
        sparkMAX3, sparkMAX4);
        
        robotDrive41.setSafetyEnabled(false);
        robotDrive41.setExpiration(0.1);
        robotDrive41.setSensitivity(0.5);
        robotDrive41.setMaxOutput(1.0);

        
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new JoystickDrive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
        SmartDashboard.putNumber("LineAngle", LineAngle);
        SmartDashboard.putNumber("X1", X1);
        SmartDashboard.putNumber("X2", X2);
        SmartDashboard.putNumber("Y1", Y1);
        SmartDashboard.putNumber("Y2", Y2);
        SmartDashboard.putNumber("Right Encoder", rightEncoder.getPosition());
        SmartDashboard.putNumber("Left Encoder", leftEncoder.getPosition());       
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
     
    public void joystickImput (Joystick stick) {
        double localSpeedVar = 1;
        robotDrive41.tankDrive(stick.getRawAxis(1)*localSpeedVar, stick.getRawAxis(5)*localSpeedVar);
        if(DriverStation.getInstance().getMatchTime() > 29 &&  DriverStation.getInstance().getMatchTime() < 31 && DriverStation.getInstance().isOperatorControl()) {
            stick.setRumble(RumbleType.kLeftRumble, 1);
        } else if(DriverStation.getInstance().getMatchTime() <= 29 && DriverStation.getInstance().isOperatorControl()) {
            stick.setRumble(RumbleType.kLeftRumble, 0);
        }
    }

    public void shift() {
        System.out.println("Start Shift");
        if(shiftingSolenoid.get() != Value.kForward) {
            shiftingSolenoid.set(Value.kForward);
            System.out.println("Shifted forward");
        } else {
            shiftingSolenoid.set(Value.kReverse);
            System.out.println("Shifted Backward");
        }
    }

        public boolean wallAlignAndDrive(double speed) {
            double difference = leftUltra.getRangeInches() - rightUltra.getRangeInches();
            if (difference > 1) {
                // turn right
                robotDrive41.tankDrive(speed, -speed);
                return false;
            } else if (difference < -1) {
                // turn left
                robotDrive41.tankDrive(-speed, speed);
                return false;
            } else {
                double averageDistance = (leftUltra.getRangeInches() + rightUltra.getRangeInches()) / 2;
                if (averageDistance > 5) {
                    // drive forward
                    robotDrive41.tankDrive(speed, speed);
                    return false;
                } else {
                    robotDrive41.tankDrive(0, 0);
                    isDriverControlMode = true;
                    return true;
                }

            }
        }
        
        public void alignToLine(double speed) {
            if(AreThereLines) {
                midpointX = ((((X2 - X1) / 2)) + X1);
                midpointY = ((((Y2 - Y1) / 2))+ Y1);
                double offset = midpointX - 120;
                if (offset > 10) {
                    //Move left
                } else if (offset < 10) {
                    //Move right
                } else {
                    // you are done
                }
            }
        }

        public void turn(double speed) {
            robotDrive41.tankDrive(speed, -speed);
        }

        public void driveStraight(double speed) {
            robotDrive41.tankDrive(speed, speed);
        }

        public void stop() {
            robotDrive41.tankDrive(0, 0);
        }

        public void getAngle() {
            // FRCGryo.getAngle();
        }

        public void zeroGyro() {
        //    FRCGyro.calibrate();
        }

        public double getLeftEncoder() {
            return leftEncoder.getPosition();
        }

        public double getRightEncoder() {
            return rightEncoder.getPosition();
        }

        public void getX1(double x1) {
            X1 = x1;
        }

        public void getX2(double x2) {
            X2 = x2;
        }

        public void getY1(double y1) {
            Y1 = y1;
        }

        public void getY2(double y2) {
            Y2 = y2;
        }

        public void getLineAngle(double lineAngle) {
            LineAngle = lineAngle;
        }

        public void getLineLength(double lineLength) {
            LineLength = lineLength;
        }

        public void areThereLines(boolean areThereLines) {
            AreThereLines = areThereLines;
        }

    }


