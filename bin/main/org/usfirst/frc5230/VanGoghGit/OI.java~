// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5230.VanGoghGit;

import org.usfirst.frc5230.VanGoghGit.commands.*;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.buttons.Trigger;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton lBump;
    public JoystickButton back;
    public JoystickButton start;
    public JoystickButton x;
    public Joystick xbox1;
    public JoystickButton a2;
    public JoystickButton y2;
    public JoystickButton b2;
    public JoystickButton rBump2;
    public Joystick xbox2;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        xbox2 = new Joystick(1);
        
        rBump2 = new JoystickButton(xbox2, 6);
        rBump2.whileHeld(new ballPlacerRun());
        b2 = new JoystickButton(xbox2, 2);
        b2.whenPressed(new hatchToggleRotate());
        y2 = new JoystickButton(xbox2, 4);
        y2.whenPressed(new hatchToggleExtend());
        a2 = new JoystickButton(xbox2, 1);
        a2.whenPressed(new hatchToggleClamp());
        xbox1 = new Joystick(0);
        
        x = new JoystickButton(xbox1, 3);
        x.whenPressed(new toggleJoystickDrive());
        start = new JoystickButton(xbox1, 8);
        start.whileHeld(new elevatorDown());
        back = new JoystickButton(xbox1, 7);
        back.whileHeld(new elevatorUp());
        lBump = new JoystickButton(xbox1, 5);
        lBump.whenPressed(new Shift());


        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("Shift", new Shift());
        SmartDashboard.putData("JoystickDrive", new JoystickDrive());
        SmartDashboard.putData("ballIntakeRun", new ballIntakeRun());
        SmartDashboard.putData("hatchToggleRotate", new hatchToggleRotate());
        SmartDashboard.putData("hatchToggleExtend", new hatchToggleExtend());
        SmartDashboard.putData("hatchToggleClamp", new hatchToggleClamp());
        SmartDashboard.putData("ballPlacerRun", new ballPlacerRun());
        SmartDashboard.putData("ballToggleRotate", new ballToggleRotate());
        SmartDashboard.putData("elevatorUp", new elevatorUp());
        SmartDashboard.putData("elevatorDown", new elevatorDown());
        SmartDashboard.putData("returnDriverControl", new returnDriverControl());
        SmartDashboard.putData("alignToLine", new alignToLine());
        SmartDashboard.putData("wallAlignAndDrive", new wallAlignAndDrive());
        SmartDashboard.putData("alignWithLimelight", new alignWithLimelight());
        SmartDashboard.putData("toggleJoystickDrive", new toggleJoystickDrive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

  //      new DoubleButton(xbox1, 3, 4).whenActive(new elevatorLevelOne());
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getXbox1() {
        return xbox1;
    }

    public Joystick getXbox2() {
        return xbox2;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

