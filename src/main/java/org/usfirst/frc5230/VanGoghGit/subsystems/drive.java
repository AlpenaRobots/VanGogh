// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5230.VanGoghGit.subsystems;


import org.usfirst.frc5230.VanGoghGit.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
import edu.wpi.first.wpilibj.DoubleSolenoid.Value;
import edu.wpi.first.wpilibj.GenericHID.RumbleType;

import com.revrobotics.CANEncoder;
import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;

import edu.wpi.first.networktables.NetworkTableInstance;
import edu.wpi.first.wpilibj.ADXRS450_Gyro;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Ultrasonic;

import java.awt.Robot;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.RobotDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class drive extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS


    private DoubleSolenoid shiftingSolenoid;
    private CANSparkMax sparkMAX1;
    private CANSparkMax sparkMAX2;
    private CANSparkMax sparkMAX3;
    private CANSparkMax sparkMAX4;
    public RobotDrive robotDrive41;

    private CANEncoder rightEncoder;
    private CANEncoder leftEncoder;
    private Ultrasonic leftUltra = new Ultrasonic(0, 1);
    private Ultrasonic rightUltra = new Ultrasonic(2, 3);
 //   private ADXRS450_Gyro FRCGyro = new ADXRS450_Gyro();

    public boolean isDriverControlMode = true;
    public double x1 = 0;
    public double x2 = 0;
    public double y1 = 0;
    public double y2 = 0;
    public double lineAngle = 0;  
    public double lineLength = 0;
    public double midpointX;
    public double midpointY;
    public boolean AreThereLines = false;

    public boolean m_LimelightHasValidTarget = false;
    public double m_LimelightDriveCommand = 0.0;
    public double m_LimelightSteerCommand = 0.0;
    public double tx;
    public boolean isDriverControl = true;
    

    public drive() {
    
        shiftingSolenoid = new DoubleSolenoid(0, 0, 1);
        addChild("ShiftingSolenoid",shiftingSolenoid);
        
        
        sparkMAX1 = new CANSparkMax(16, MotorType.kBrushless);
        
        
        sparkMAX2 = new CANSparkMax(1, MotorType.kBrushless);
        
        
        sparkMAX3 = new CANSparkMax(14, MotorType.kBrushless);
        
        
        sparkMAX4 = new CANSparkMax(15, MotorType.kBrushless);
        
        
        
        robotDrive41 = new RobotDrive(sparkMAX1, sparkMAX2,
        sparkMAX3, sparkMAX4);
        
        robotDrive41.setSafetyEnabled(false);
        robotDrive41.setExpiration(0.1);
        robotDrive41.setSensitivity(0.5);
        robotDrive41.setMaxOutput(1.0);

        
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new JoystickDrive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
        shiftingSolenoid.set(Value.kReverse);
        SmartDashboard.putBoolean("Gear", false);
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
        SmartDashboard.putNumber("LineAngle", lineAngle);
        SmartDashboard.putNumber("X1", x1);
        SmartDashboard.putNumber("X2", x2);
        SmartDashboard.putNumber("Y1", y1);
        SmartDashboard.putNumber("Y2", y2);
        SmartDashboard.putNumber("Right Encoder", rightEncoder.getPosition());
        SmartDashboard.putNumber("Left Encoder", leftEncoder.getPosition());       
        SmartDashboard.putBoolean("Is Driver Control", isDriverControl);
        SmartDashboard.putNumber("tx", Math.abs(tx));
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
     
    public void joystickInput (Joystick stick) {
        double localSpeedVar = 1;
        robotDrive41.tankDrive(stick.getRawAxis(1)*localSpeedVar, stick.getRawAxis(5)*localSpeedVar);
        if(DriverStation.getInstance().getMatchTime() > 29 &&  DriverStation.getInstance().getMatchTime() < 31 && DriverStation.getInstance().isOperatorControl()) {
            stick.setRumble(RumbleType.kLeftRumble, 1);
        } else if(DriverStation.getInstance().getMatchTime() <= 29 && DriverStation.getInstance().isOperatorControl()) {
            stick.setRumble(RumbleType.kLeftRumble, 0);
        }
    }

    public void shift() {
        System.out.println("Start Shift");
        if(shiftingSolenoid.get() != Value.kForward) {
            shiftingSolenoid.set(Value.kForward);
            SmartDashboard.putBoolean("Gear", true);
            System.out.println("Shifted forward");
        } else {
            shiftingSolenoid.set(Value.kReverse);
            SmartDashboard.putBoolean("Gear", false);
            System.out.println("Shifted Backward");
        }
    }

        public boolean wallAlignAndDrive(double speed) {
            double difference = leftUltra.getRangeInches() - rightUltra.getRangeInches();
            if (difference > 1) {
                // turn right
                robotDrive41.tankDrive(speed, -speed);
                return false;
            } else if (difference < -1) {
                // turn left
                robotDrive41.tankDrive(-speed, speed);
                return false;
            } else {
                double averageDistance = (leftUltra.getRangeInches() + rightUltra.getRangeInches()) / 2;
                if (averageDistance > 5) {
                    // drive forward
                    robotDrive41.tankDrive(speed, speed);
                    return false;
                } else {
                    robotDrive41.tankDrive(0, 0);
                    isDriverControlMode = true;
                    return true;
                }

            }
        }
        
        public void alignToLine() {

        }

        public void updateGaffersTape() {
            x1 = NetworkTableInstance.getDefault().getTable("GRIP/horizontalLines").getEntry("x1").getDouble(0);
            x2 = NetworkTableInstance.getDefault().getTable("GRIP/horizontalLines").getEntry("x2").getDouble(0);
            y1 = NetworkTableInstance.getDefault().getTable("GRIP/horizontalLines").getEntry("y1").getDouble(0);
            y2 = NetworkTableInstance.getDefault().getTable("GRIP/horizontalLines").getEntry("y2").getDouble(0); 
            lineAngle = NetworkTableInstance.getDefault().getTable("GRIP/horizontalLines").getEntry("angle").getDouble(0);
            lineLength = NetworkTableInstance.getDefault().getTable("GRIP/horizontalLines").getEntry("length").getDouble(0);
        }

        public void turn(double speed) {
            robotDrive41.tankDrive(speed, -speed);
        }

        public void driveStraight(double speed) {
            robotDrive41.tankDrive(speed, speed);
        }

        public void stop() {
            robotDrive41.tankDrive(0, 0);
        }

        public void getAngle() {
            // FRCGryo.getAngle();
        }

        public void zeroGyro() {
        //    FRCGyro.calibrate();
        }

        public double getLeftEncoder() {
            return leftEncoder.getPosition();
        }

        public double getRightEncoder() {
            return rightEncoder.getPosition();
        }

        public void updateLimelightTracking() {
        // These numbers must be tuned for your Robot! Be careful!

        final double STEER_K = 0.05; // how hard to turn toward the target
        final double DRIVE_K = 0.15; // how hard to drive fwd toward the target
        final double DESIRED_TARGET_AREA = 13.0; // Area of the target when the robot reaches the wall
        final double MAX_DRIVE = 0.7; // Simple speed limit so we don't drive too fast
        double tv = NetworkTableInstance.getDefault().getTable("limelight").getEntry("tv").getDouble(0);
        double tx = NetworkTableInstance.getDefault().getTable("limelight").getEntry("tx").getDouble(0);
        double ty = NetworkTableInstance.getDefault().getTable("limelight").getEntry("ty").getDouble(0);
        double ta = NetworkTableInstance.getDefault().getTable("limelight").getEntry("ta").getDouble(0);
        if (tv < 1.0) {
            m_LimelightHasValidTarget = false;
            m_LimelightDriveCommand = 0.0;
            m_LimelightSteerCommand = 0.0;

            SmartDashboard.putBoolean("HasValidTarget", m_LimelightHasValidTarget);
            SmartDashboard.putNumber("Drive Command", m_LimelightDriveCommand);
            SmartDashboard.putNumber("Steer Command", m_LimelightSteerCommand);

            return; 
            }
            m_LimelightHasValidTarget = true;
            // Start with proportional steering
            double steer_cmd = tx * STEER_K;
            m_LimelightSteerCommand = steer_cmd;
            // try to drive forward until the target area reaches our desired area
            double drive_cmd = (DESIRED_TARGET_AREA - ta) * DRIVE_K;
            // don't let the robot drive too fast into the goal
           
            SmartDashboard.putBoolean("HasValidTarget", m_LimelightHasValidTarget);
            SmartDashboard.putNumber("Drive Command", m_LimelightDriveCommand);
            SmartDashboard.putNumber("Steer Command", m_LimelightSteerCommand);

            if (drive_cmd > MAX_DRIVE) {
                drive_cmd = MAX_DRIVE;
            }
            m_LimelightDriveCommand = drive_cmd;
}
}
